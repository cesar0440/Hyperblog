version 2.1
jobs
  build
    docker
      - image ubuntu14.04
        auth
          username mydockerhub-user
          password $DOCKERHUB_PASSWORD  # context  project UI env-var reference

      - image mongo2.6.8
        auth
          username mydockerhub-user
          password $DOCKERHUB_PASSWORD  # context  project UI env-var reference
        command [mongod, --smallfiles]

      - image postgres14.2
        auth
          username mydockerhub-user
          password $DOCKERHUB_PASSWORD  # context  project UI env-var reference
        # some containers require setting environment variables
        environment
          POSTGRES_USER user

      - image redis@sha25654057dd7e125ca41afe526a877e8bd35ec2cdd33b9217e022ed37bdcf7d09673
        auth
          username mydockerhub-user
          password $DOCKERHUB_PASSWORD  # context  project UI env-var reference

      - image rabbitmq3.5.4
        auth
          username mydockerhub-user
          password $DOCKERHUB_PASSWORD  # context  project UI env-var reference

    environment
      TEST_REPORTS tmptest-reports

    working_directory ~my-project

    steps
      - checkout

      - run
          command echo 127.0.0.1 devhost  sudo tee -a etchosts

      # Create Postgres users and database
      # Note the YAML heredoc '' for nicer formatting
      - run 
          sudo -u root createuser -h localhost --superuser ubuntu &&
          sudo createdb -h localhost test_db

      - restore_cache
          keys
            - v1-my-project-{{ checksum project.clj }}
            - v1-my-project-

      - run
          environment
            SSH_TARGET localhost
            TEST_ENV linux
          command 
            set -xu
            mkdir -p ${TEST_REPORTS}
            run-tests.sh
            cp outtests.xml ${TEST_REPORTS}

      - run 
          set -xu
          mkdir -p tmpartifacts
          create_jars.sh  pipeline.number 
          cp .jar tmpartifacts

      - save_cache
          key v1-my-project-{{ checksum project.clj }}
          paths
            - ~.m2

      # Save artifacts
      - store_artifacts
          path tmpartifacts
          destination build

      # Upload test results
      - store_test_results
          path tmptest-reports

  deploy-stage
    docker
      - image ubuntu14.04
        auth
          username mydockerhub-user
          password $DOCKERHUB_PASSWORD  # context  project UI env-var reference
    working_directory tmpmy-project
    steps
      - run
          name Deploy if tests pass and branch is Staging
          command ansible-playbook site.yml -i staging

  deploy-prod
    docker
      - image ubuntu14.04
        auth
          username mydockerhub-user
          password $DOCKERHUB_PASSWORD  # context  project UI env-var reference
    working_directory tmpmy-project
    steps
      - run
          name Deploy if tests pass and branch is Main
          command ansible-playbook site.yml -i production

workflows
  version 2
  build-deploy
    jobs
      - build
          filters
            branches
              ignore
                - develop
                - feature-.
      - deploy-stage
          requires
            - build
          filters
            branches
              only staging
      - deploy-prod
          requires
            - build
          filters
            branches
              only main